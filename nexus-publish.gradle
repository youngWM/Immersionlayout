apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}


// 加载配置信息 properties
def properties = new Properties()
def inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load( inputStream )

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId  properties.getProperty('POM_GROUP_ID')
            artifactId  properties.getProperty('POM_ARTIFACT_ID')
            version  properties.getProperty('POM_VERSION_NAME')

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name =  properties.getProperty('POM_ARTIFACT_ID')
                description =  properties.getProperty('POM_DESCRIPTION')
                // If your project has a dedicated site, use its URL here
                url =  properties.getProperty('POM_URL')
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name =  properties.getProperty('POM_LICENCE_NAME')
                        url =  properties.getProperty('POM_LICENCE_URL')
                    }
                }
                developers {
                    developer {
                        id =  properties.getProperty('POM_DEVELOPER_ID')
                        name =  properties.getProperty('POM_DEVELOPER_NAME')
                        email =  properties.getProperty('POM_DEVELOPER_EMAIL')
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    url =  properties.getProperty('POM_SCM_URL')
                    connection =  properties.getProperty('POM_SCM_CONNECTION')
                    developerConnection =  properties.getProperty('POM_SCM_DEV_CONNECTION')
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name =  properties.getProperty('POM_ARTIFACT_ID')

            def releasesRepoUrl =  properties.getProperty('RELEASE_REPOSITORY_URL')
            def snapshotsRepoUrl =  properties.getProperty('SNAPSHOT_REPOSITORY_URL')
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username  NEXUS_USERNAME
                password  NEXUS_PASSWORD
            }
        }
    }
}

signing {
    sign publishing.publications
}
